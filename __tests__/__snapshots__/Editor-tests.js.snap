// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  keyboardVerticalOffset={0}
  onLayout={[Function]}
  style={
    Array [
      Array [
        null,
      ],
      Object {
        "paddingBottom": 0,
      },
    ]
  }
>
  <RCTScrollView
    data={
      Array [
        Object {
          "continued": false,
          "continuing": false,
          "end": 3,
          "isEditing": false,
          "isSelected": false,
          "rawLineIndex": 0,
          "start": 0,
          "text": "foo",
          "textSections": Array [
            Object {
              "end": 3,
              "highlight": "normal",
              "start": 0,
              "text": "foo",
            },
          ],
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    getItemLayout={[Function]}
    horizontal={false}
    initialNumToRender={10}
    isEditing={false}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onChangeData={[Function]}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    onSelectLine={[Function]}
    onSelectWord={[Function]}
    onViewableItemsChanged={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    selectedLineIndex={undefined}
    selectedLocation={undefined}
    selectedWord={undefined}
    showsVerticalScrollIndicator={false}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "overflow": "hidden",
      }
    }
    updateCellsBatchingPeriod={50}
    width={320}
    windowSize={5}
  >
    <View>
      <View
        onLayout={undefined}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hitSlop={undefined}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={undefined}
          testID={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            disabled={false}
            ellipsizeMode="tail"
            style={
              Array [
                Object {},
                Object {
                  "fontFamily": "Courier New",
                  "fontSize": 14,
                },
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              disabled={false}
              ellipsizeMode="tail"
              style={Object {}}
            >
              foo
            </Text>
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View
    style={
      Object {
        "borderTopColor": "#AAAAAA",
        "borderTopWidth": 1,
        "flexDirection": "row",
        "height": 44,
        "paddingLeft": 10,
        "paddingRight": 10,
      }
    }
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Object {
            "alignSelf": "center",
          },
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Object {
            "fontFamily": "Courier New",
            "minWidth": 44,
            "paddingBottom": 10,
            "paddingLeft": 10,
            "paddingRight": 10,
            "paddingTop": 10,
            "textAlign": "center",
          }
        }
      >
        /abc/
      </Text>
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
          },
          Object {
            "alignSelf": "center",
          },
        ]
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Object {
            "fontFamily": "Courier New",
            "minWidth": 44,
            "paddingBottom": 10,
            "paddingLeft": 10,
            "paddingRight": 10,
            "paddingTop": 10,
            "textAlign": "center",
          }
        }
      >
        #
      </Text>
    </View>
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    />
  </View>
</View>
`;
